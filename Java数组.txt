//数组
/*
	定义：一个容器，存储同种数据类型的多个值
		要考虑隐式转换：根据数据类型的取值范围大小决定
		格式：数据类型 [] 数组名;(常用方式)  或者  数据类型 数组名[];
		
		静态初始化： (完整格式)数据类型 [] 数组名 = new 数据类型[]{元素....};
						常用简化格式：数据类型 [] 数组名 ={元素....};
			静态初始化一旦定义就确定了长度
	
		地址值格式含义： [ ：表示是一个数组
						[ 后面的参数是表示什么数据类型
						@：表示间隔符号，固定格式
						@后面的才是真正的地址
		
		获取数组的元素：格式  数组名[索引];索引从0开始
		
		把数据存储到数组中 ：格式  数组名[索引] = 具体数据/变量； 一旦覆盖后原来的数据就不存在了
		
		数组遍历：将数组中所有元素内容取出来，用于其他操作
				最大索引=数组长度-1
				Java中有关于数组长度的属性 length;调用方式：数组名.length
				
		*建议一个循环只做一件事
		
		
		数组的动态初始化：数据类型 [] 数组名 = new 数据类型[数组长度];
		
		数组默认初始化值的规律： 整形： 0。小数 ：0.0 。字符：“\u0000” 空格  。布尔类型 ： false 。引用数据类型： null。
		
		
		静态初始化与动态初始化的使用场景：
			1.只明确元素个数，不知道具体数值，推荐使用动态初始化
			
			2.需求中明确了要操作的具体数据，直接静态初始化即可
		
		数组常见问题：
			1.索引超出数组长度（索引越界异常）
			
		数组常见操作：
			1.求最值	假装数组中第一个元素就是最值，再进行判断
			2.求和
			3.数据交换
 */